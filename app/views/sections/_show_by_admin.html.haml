

= render partial: "/sections/download_options", locals: {section: section}
= render partial: '/sections/desc_table', locals: {section: section}
-# @academic_records ||= section.academic_records 
%br
.fixed-top.alert.text-center.text-small#message{role: :alert}

= render partial: 'academic_records/qualify', locals: {section: section}



:javascript

	function checkPost(ele) {
		let elem = $(ele);
		let post_elem, final_elem;
		let id = elem.attr('id_obj');
		let val = elem.val();
		let valor_checked = elem.prop('checked');
		let checkboxs = $(`#acRe${id} .checkPost`);

		checkboxs.prop('disabled', valor_checked);
		checkboxs.prop('checked', false);

		elem.prop('disabled', false);
		elem.prop('checked', valor_checked);

		final_elem = $(`#acRe${id} #_qualificationfinal`);
		final_elem.prop('disabled', valor_checked);

		post_elem = $(`#acRe${id} #_qualificationpost`);
		let post_elem_val = post_elem.val();
		let final_elem_val = final_elem.val();
		post_elem.attr('type_q', val);
		if (valor_checked == false && (post_elem_val != '')) {
			post_elem.val(-2);
			sendQualification(post_elem, final_elem_val);
		}
		post_elem.val('');
		post_elem.prop('disabled', !valor_checked);		
	}


	function onlyValidQ(ele){
		var node = $(ele);
		node.val(node.val().replace(/[^0-9]/g,'') );
	}

	function final(ele) {
		elem = $(ele);
		let id = elem.attr('id_obj');
		let checkboxs = $(`#acRe${id} .checkPost`);

		let no_post = (elem.val() == '' || elem.val() > 9 )

		checkboxs.prop('disabled', no_post);
		checkboxs.prop('checked', false);

	}

	function pi(ele) {
		let id = $(ele).attr('id_obj');
		
		#tatus = 'sin_calificar';
		if (ele.checked) {status = 'perdida_por_inasistencia'}
		let values = `{"academic_record": {"status": "${status}"}}`;
		let url = `/academic_records/${id}`
		sendData('pi', ele, id, url, values);
	}

	function sendQualification(ele, val2) {
		let elem = $(ele);
		let id = elem.attr('id_obj');
		let tipo = elem.attr('type_q');
		let val = elem.val();
		val = parseInt(val)
		let url = `/qualifications/${id}`
		let values = `{"qualification": {"value": ${val}, "type_q": "${tipo}"}}`;
		console.log("VAL despues de values: "+val);
		sendData('qualifiable', val, id, url, values, val2);
	}

	function sendData(tipo, ele, id, url, values, val2){
		var result = false;
		$.ajax({
			url: url,
			type: 'PATCH',
			data: JSON.parse(values),
			dataType: 'json',
			beforeSend: function(xhr) {
				xhr.setRequestHeader('X-CSRF-Token', $('meta[name="csrf-token"]').attr('content'));
			},
			done: function(json) {
				if (tipo == 'pi') {desactivar_por_pi(ele, id)}
				if (tipo == 'qualifiable') {numero_a_letras(ele, id)}
				messageSendData(json.type, json.data);
			},
			success: function(json) {
				if (tipo == 'pi') {desactivar_por_pi(ele, id)}
				if (tipo == 'qualifiable') {numero_a_letras(ele, id)}
				if (val2 != undefined) {numero_a_letras(val2, id)}
				messageSendData(json.type, json.data);
			},
			error: function(json) {
				messageSendData(json.type, json.data);
			},
			unprocessable_entity: function(json) {
				messageSendData(json.type, json.data);
			}
		});
	}

	function messageSendData(clase, msg) {
		let elem = $('#message')

		elem.removeClass('alert-danger alert-success')

		elem.addClass(`alert-${clase}`)
		elem.html(msg)
		
		elem.fadeIn(0);
		elem.fadeOut(4000);

	}

	function desactivar_por_pi(obj, ar_id){
		var inputs, valor_checked;

		inputs = $(`#acRe${ar_id} input`);
		valor_checked = $(obj).prop('checked');
		inputs.val(null);

		let checkboxs = $(`#acRe${ar_id} .checkPost`);

		checkboxs.prop('disabled', valor_checked);
		checkboxs.prop('checked', false)

		inputs.prop('disabled', valor_checked)
		$(obj).prop('disabled', false)
		
		// final.val = (null)
		if (valor_checked === true) {
			numero_a_letras('-1', ar_id);
		}else{
			numero_a_letras(undefined, ar_id);
		}
		
		$(`#_${ar_id}qualfication_to_s`).prop('disabled', true);
		$(`#_${ar_id}qualfication_to_s`).prop('readonly', true);		
	}

	function numero_a_letras(valor, ar_id){
		let final, clase,
		valores = ['CERO', 'UNO', 'DOS', 'TRES', 'CUATRO', 'CINCO', 'SEIS', 'SIETE', 'OCHO', 'NUEVE', 'DIEZ', 'ONCE', 'DOCE', 'TRECE', 'CATORCE', 'QUINCE'] 
		let label = 'Sin Calificar'

		valor = parseInt(valor)
		if (valor == 0){
			final = 'CERO CERO'
			clase = 'table-danger'
		}else if (!valor){
			final = 'SIN CALIFICAR'
			clase = ''
		}else if (valor == -1){
			final = 'PERDIDA POR INASISTENCIA'
			clase = 'table-danger'
			label = 'Perdida Por Inasistencia'
		}else if (valor >= 0 && valor < 10){
			final = `CERO ${valores[valor]}`
			clase = 'table-danger'
			label = 'Aplazado'
		}else if (valor > 9 && valor < 16) {
			final = valores[valor]
			clase = 'table-success'
			label = 'Aprobado'
		}else if (valor > 15 && valor < 20){
			valor = valor % 10
			final = `DIEZ Y ${valores[valor]}`
			clase = 'table-success'
			label = 'Aprobado'
		}else if (valor == 20){
			final = 'VEINTE'
			clase = 'table-success'
			label = 'Aprobado'
		}else{
			final = 'SIN CALIFICAR'
			clase = ''
		}
		$(`#acRe${ar_id}`).removeClass().addClass(clase);
		$(`#_${ar_id}qualfication_to_s`).val(final);
		$(`#labelStatus${ar_id}`)[0].innerHTML = label;

	}